// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: message/v1/message.proto

package messagev1

import (
	v1 "github.com/JrMarcco/synp-api/api/go/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Message struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 业务 key，由客户端生成。
	// biz_key 有 2 个作用:
	//
	//	1.消息去重；
	//	2.对 biz_key 进行 hash，选择消息队列分区从而保证消息有序性。
	BizKey string `protobuf:"bytes,1,opt,name=biz_key,json=bizKey,proto3" json:"biz_key,omitempty"`
	// 消息类型。
	// 这里不使用 MessageType type 作为字段名是因为 type 在 go 里面是关键字。
	Cmd v1.CommandType `protobuf:"varint,2,opt,name=cmd,proto3,enum=common.v1.CommandType" json:"cmd,omitempty"`
	// body 的序列化类型。
	SerializeType v1.SerializeType `protobuf:"varint,3,opt,name=serialize_type,json=serializeType,proto3,enum=common.v1.SerializeType" json:"serialize_type,omitempty"`
	// 消息体。
	Body          []byte `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_message_v1_message_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_message_v1_message_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_message_v1_message_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetBizKey() string {
	if x != nil {
		return x.BizKey
	}
	return ""
}

func (x *Message) GetCmd() v1.CommandType {
	if x != nil {
		return x.Cmd
	}
	return v1.CommandType(0)
}

func (x *Message) GetSerializeType() v1.SerializeType {
	if x != nil {
		return x.SerializeType
	}
	return v1.SerializeType(0)
}

func (x *Message) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

// PushMessage 是由业务后端（backend）主动向网关发送的消息。
// 通信方式为业务后端推送 PushMessage 到 Kafka 的指定 topic，由网关监听并消费。
type PushMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 同 Message 的 biz_key，由 backend 生成。
	BizKey     string `protobuf:"bytes,1,opt,name=biz_key,json=bizKey,proto3" json:"biz_key,omitempty"`
	BizId      uint64 `protobuf:"varint,2,opt,name=biz_id,json=bizId,proto3" json:"biz_id,omitempty"`
	ReceiverId uint64 `protobuf:"varint,3,opt,name=receiver_id,json=receiverId,proto3" json:"receiver_id,omitempty"`
	// body 的序列化类型。
	SerializeType v1.SerializeType `protobuf:"varint,4,opt,name=serialize_type,json=serializeType,proto3,enum=common.v1.SerializeType" json:"serialize_type,omitempty"`
	// 消息体。
	Body          []byte `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PushMessage) Reset() {
	*x = PushMessage{}
	mi := &file_message_v1_message_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushMessage) ProtoMessage() {}

func (x *PushMessage) ProtoReflect() protoreflect.Message {
	mi := &file_message_v1_message_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushMessage.ProtoReflect.Descriptor instead.
func (*PushMessage) Descriptor() ([]byte, []int) {
	return file_message_v1_message_proto_rawDescGZIP(), []int{1}
}

func (x *PushMessage) GetBizKey() string {
	if x != nil {
		return x.BizKey
	}
	return ""
}

func (x *PushMessage) GetBizId() uint64 {
	if x != nil {
		return x.BizId
	}
	return 0
}

func (x *PushMessage) GetReceiverId() uint64 {
	if x != nil {
		return x.ReceiverId
	}
	return 0
}

func (x *PushMessage) GetSerializeType() v1.SerializeType {
	if x != nil {
		return x.SerializeType
	}
	return v1.SerializeType(0)
}

func (x *PushMessage) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

var File_message_v1_message_proto protoreflect.FileDescriptor

const file_message_v1_message_proto_rawDesc = "" +
	"\n" +
	"\x18message/v1/message.proto\x12\n" +
	"message.v1\x1a\x15common/v1/types.proto\"\xa1\x01\n" +
	"\aMessage\x12\x17\n" +
	"\abiz_key\x18\x01 \x01(\tR\x06bizKey\x12(\n" +
	"\x03cmd\x18\x02 \x01(\x0e2\x16.common.v1.CommandTypeR\x03cmd\x12?\n" +
	"\x0eserialize_type\x18\x03 \x01(\x0e2\x18.common.v1.SerializeTypeR\rserializeType\x12\x12\n" +
	"\x04body\x18\x04 \x01(\fR\x04body\"\xb3\x01\n" +
	"\vPushMessage\x12\x17\n" +
	"\abiz_key\x18\x01 \x01(\tR\x06bizKey\x12\x15\n" +
	"\x06biz_id\x18\x02 \x01(\x04R\x05bizId\x12\x1f\n" +
	"\vreceiver_id\x18\x03 \x01(\x04R\n" +
	"receiverId\x12?\n" +
	"\x0eserialize_type\x18\x04 \x01(\x0e2\x18.common.v1.SerializeTypeR\rserializeType\x12\x12\n" +
	"\x04body\x18\x05 \x01(\fR\x04bodyB\xa1\x01\n" +
	"\x0ecom.message.v1B\fMessageProtoP\x01Z8github.com/JrMarcco/synp-api/api/go/message/v1;messagev1\xa2\x02\x03MXX\xaa\x02\n" +
	"Message.V1\xca\x02\n" +
	"Message\\V1\xe2\x02\x16Message\\V1\\GPBMetadata\xea\x02\vMessage::V1b\x06proto3"

var (
	file_message_v1_message_proto_rawDescOnce sync.Once
	file_message_v1_message_proto_rawDescData []byte
)

func file_message_v1_message_proto_rawDescGZIP() []byte {
	file_message_v1_message_proto_rawDescOnce.Do(func() {
		file_message_v1_message_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_message_v1_message_proto_rawDesc), len(file_message_v1_message_proto_rawDesc)))
	})
	return file_message_v1_message_proto_rawDescData
}

var file_message_v1_message_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_message_v1_message_proto_goTypes = []any{
	(*Message)(nil),       // 0: message.v1.Message
	(*PushMessage)(nil),   // 1: message.v1.PushMessage
	(v1.CommandType)(0),   // 2: common.v1.CommandType
	(v1.SerializeType)(0), // 3: common.v1.SerializeType
}
var file_message_v1_message_proto_depIdxs = []int32{
	2, // 0: message.v1.Message.cmd:type_name -> common.v1.CommandType
	3, // 1: message.v1.Message.serialize_type:type_name -> common.v1.SerializeType
	3, // 2: message.v1.PushMessage.serialize_type:type_name -> common.v1.SerializeType
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_message_v1_message_proto_init() }
func file_message_v1_message_proto_init() {
	if File_message_v1_message_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_message_v1_message_proto_rawDesc), len(file_message_v1_message_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_message_v1_message_proto_goTypes,
		DependencyIndexes: file_message_v1_message_proto_depIdxs,
		MessageInfos:      file_message_v1_message_proto_msgTypes,
	}.Build()
	File_message_v1_message_proto = out.File
	file_message_v1_message_proto_goTypes = nil
	file_message_v1_message_proto_depIdxs = nil
}
